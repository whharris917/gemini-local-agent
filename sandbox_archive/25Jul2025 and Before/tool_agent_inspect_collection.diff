--- a/tool_agent.py
+++ b/tool_agent.py
@@ -4,6 +4,7 @@
 import json
 import logging
 from eventlet import tpool
+from datetime import datetime
 import chromadb
 import uuid
 from audit_logger import audit_log 
@@ -231,6 +232,39 @@
 
             return {"status": "success", "message": f"Session '{session_name}' saved and session state updated."}
 
+        elif action == 'inspect_collection':
+            collection_name = params.get('collection_name')
+            if not collection_name:
+                return {"status": "error", "message": "Collection name not provided."}
+            try:
+                collection = chroma_client.get_collection(name=collection_name)
+                data = collection.get(include=["metadatas", "documents"])
+
+                if not data or not data['ids']:
+                    return {"status": "success", "message": f"Collection '{collection_name}' is empty.", "collection_name": collection_name, "data": []}
+
+                formatted_data = []
+                for i, doc_id in enumerate(data['ids']):
+                    metadata = data['metadatas'][i] if data['metadatas'] and data['metadatas'][i] else {}
+                    timestamp = metadata.get('timestamp', 0)
+                    try:
+                        readable_time = datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S') if timestamp else 'N/A'
+                    except (ValueError, TypeError):
+                        readable_time = 'Invalid Timestamp'
+
+                    formatted_data.append({
+                        'ID': doc_id,
+                        'Timestamp': readable_time,
+                        'Role': metadata.get('role', 'N/A'),
+                        'Document': data['documents'][i] if data['documents'] and data['documents'][i] else 'N/A'
+                    })
+                
+                formatted_data.sort(key=lambda x: x.get('Timestamp', ''), reverse=True)
+                
+                return {"status": "success", "message": f"Data for collection '{collection_name}' retrieved.", "collection_name": collection_name, "data": formatted_data}
+            except ValueError:
+                return {"status": "error", "message": f"Collection '{collection_name}' not found."}
+            except Exception as e:
+                logging.error(f"Error inspecting collection '{collection_name}': {e}")
+                return {"status": "error", "message": f"Could not inspect collection: {e}"}
+
         elif action == 'list_sessions':
             collections = chroma_client.list_collections()
             
