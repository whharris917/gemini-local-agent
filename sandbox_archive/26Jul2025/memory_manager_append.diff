--- a/memory_manager.py
+++ b/sandbox/memory_manager.py
@@ -247,3 +247,65 @@
                 self.chroma_client.delete_collection(name=collection_name)
                 logging.info(f"Cleared and deleted ChromaDB collection: {collection_name} for session '{self.session_name}'")
             except Exception as e:
-                logging.error(f"Error clearing collection {self.collection.name} for session '{self.session_name}': {e}")
+                logging.error(f"Error clearing collection {self.collection.name} for session '{self.session_name}': {e}")
+
+    def get_unsummarized_turns(self):
+        """
+        Retrieves all turns that have not yet been included in a summary.
+        This is the source material for creating a new Tier 2 summary.
+        """
+        all_turns = self.get_all_turns()
+        unsummarized = [
+            turn for turn in all_turns
+            if not turn['metadata'].get('is_summarized') and turn['metadata'].get('role') in ['user', 'model']
+        ]
+        # Sort chronologically to ensure summary is logical
+        unsummarized.sort(key=lambda x: x['metadata'].get('timestamp', 0))
+        return unsummarized
+
+    def add_summary_and_update_originals(self, summary_text, original_turn_ids):
+        """
+        Adds a new summary document (Tier 2) and marks the original turns (Tier 1)
+        as summarized to prevent re-processing.
+
+        Args:
+            summary_text: The text of the summary to be added.
+            original_turn_ids: A list of the IDs of the documents that were summarized.
+        """
+        if not self.collection:
+            logging.error("Cannot add summary: collection is not initialized.")
+            return
+
+        # 1. Add the new summary document
+        summary_id = str(uuid.uuid4())
+        # Note: Summaries themselves are not marked as 'is_summarized'.
+        summary_meta = {'role': 'summary', 'timestamp': time.time()}
+        try:
+            self.collection.add(
+                documents=[summary_text],
+                metadatas=[summary_meta],
+                ids=[summary_id]
+            )
+            logging.info(f"Added Tier 2 summary to ChromaDB for session '{self.session_name}'.")
+        except Exception as e:
+            logging.error(f"Could not add summary document to ChromaDB: {e}")
+            return # Don't mark originals if summary fails
+
+        # 2. Update the original documents to mark them as summarized
+        if original_turn_ids:
+            existing_docs = self.collection.get(ids=original_turn_ids, include=['metadatas'])
+            updated_metadatas = []
+            if existing_docs and existing_docs['metadatas']:
+                for meta in existing_docs['metadatas']:
+                    meta['is_summarized'] = True
+                    updated_metadatas.append(meta)
+                self.update_turns_metadata(ids=original_turn_ids, metadatas=updated_metadatas)
+
+    def get_recent_summaries(self, n_results=3):
+        """
+        Retrieves the N most recent summary documents to provide high-level context.
+        """
+        if not self.collection or self.collection.count() == 0:
+            return []
+        try:
+            summaries = self.collection.get(where={"role": "summary"}, include=["documents", "metadatas"])
+            if not summaries or not summaries.get('ids'): return []
+            
+            combined_summaries = sorted(zip(summaries['documents'], summaries['metadatas']), key=lambda item: item[1]['timestamp'], reverse=True)
+            return [doc for doc, meta in combined_summaries[:n_results]]
+        except Exception as e:
+            logging.error(f"Could not retrieve recent summaries from ChromaDB: {e}")
+            return []