--- a/orchestrator.py
+++ b/sandbox/orchestrator_proposed.py
@@ -482,7 +482,7 @@
         socketio.emit('log_message', {'type': 'error', 'data': f\"Failed to replay history: {e}\"}, to=session_id)
 
 
-def execute_reasoning_loop(socketio, session_data, initial_prompt, session_id, chat_sessions, model, api_stats):\n     loop_id = str(uuid.uuid4())
+def execute_reasoning_loop(socketio, session_data, initial_prompt, session_id, chat_sessions, model, api_stats):
     loop_id = str(uuid.uuid4())
 
     def get_current_session_name():
@@ -536,8 +536,25 @@
 
         observation_template = \"Tool Result: {tool_result_json}\"
 
-        for i in range(100):\n             socketio.sleep(0)
-            
+        for i in range(100):
+            socketio.sleep(0)
+
+            # --- NEW: CONTROL FLOW CHECK ---
+            # Check the session state at the beginning of each iteration.
+            if session_data.get('state') != 'running':
+                logging.info(f\"Loop {loop_id} for session {session_id} halted by state change.\")
+                audit_log.log_event(
+                    event=\"Reasoning Loop Halted by State Change\",
+                    session_id=session_id,
+                    session_name=get_current_session_name(),
+                    loop_id=loop_id,
+                    source=\"Orchestrator\",
+                    destination=\"Orchestrator\",
+                    details={\"state\": session_data.get('state')},
+                    control_flow=\"Break\"
+                )
+                break # Exit the loop
+
             audit_log.log_event(
                 event=f\"Beginning iteration {i} of reasoning loop.\",
                 session_id=session_id,
@@ -747,5 +764,10 @@
     except Exception as e:
         logging.exception(\"An error occurred in the reasoning loop.\")
         socketio.emit('log_message', {'type': 'error', 'data': f\"An error occurred during reasoning: {str(e)}\"}, to=session_id)
     finally:
+        # --- NEW: Ensure state is reset to idle when loop terminates for any reason ---
+        if session_data:
+            session_data['state'] = 'idle'
+        logging.info(f\"Loop {loop_id} for session {session_id} ended. State reset to 'idle'.\")
         audit_log.log_event(\"Reasoning Loop Ended\", session_id=session_id, session_name=get_current_session_name(), loop_id=loop_id, source=\"Orchestrator\", destination=\"Orchestrator\", observers=[\"Orchestrator\"])
+