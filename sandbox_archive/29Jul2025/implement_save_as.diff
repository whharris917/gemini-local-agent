--- a/tool_agent.py
+++ b/sandbox/tool_agent_save_as.py
@@ -337,28 +337,50 @@
             return {\"status\": \"success\", \"message\": f\"Patch applied successfully. File saved to '{target_filename}'.\"}\n\n        # --- REFACTORED AND MODIFIED SESSION MANAGEMENT TOOLS ---\n-        elif action == 'save_session':\n-            session_name = params.get('session_name')\n-            if not session_name:\n-                return {\"status\": \"error\", \"message\": \"Session name not provided.\"}\n-\n-            session_data = chat_sessions.get(session_id)\n-            if not session_data or 'memory' not in session_data:\n-                return {\"status\": \"error\", \"message\": \"Active memory session not found.\"}\n-            \n-            old_session_name = session_data.get('name')\n-            memory = session_data['memory']\n-            current_collection = memory.collection\n-            if not current_collection:\n-                 return {\"status\": \"error\", \"message\": \"ChromaDB collection not found for this session.\"}\n-\n-            current_collection.modify(name=session_name)\n-            memory.collection = chroma_client.get_collection(name=session_name)\n-            session_data['name'] = session_name\n-\n-            audit_log.log_event(\n-                event=\"Socket.IO Emit: session_name_update\",\n-                session_id=session_id, session_name=session_name, loop_id=loop_id,\n-                source=\"Server\", destination=\"Client\",\n-                details={'name': session_name, 'previous_name': old_session_name}\n-            )\n-            socketio.emit('session_name_update', {'name': session_name}, to=session_id)\n-\n-            return {\"status\": \"success\", \"message\": f\"Session '{session_name}' saved and session state updated.\"}\n+        elif action == 'save_session': # Implements 'Save As' functionality\n+            new_session_name = params.get('session_name')\n+            if not new_session_name:\n+                return {\"status\": \"error\", \"message\": \"Session name not provided.\"}\n+\n+            session_data = chat_sessions.get(session_id)\n+            if not session_data or 'memory' not in session_data:\n+                return {\"status\": \"error\", \"message\": \"Active memory session not found.\"}\n+            \n+            memory = session_data['memory']\n+            source_collection = memory.collection\n+            source_session_name = memory.session_name\n+\n+            if new_session_name == source_session_name:\n+                return {\"status\": \"error\", \"message\": \"Cannot save session with the same name. Please provide a new name.\"}\n+\n+            try:\n+                # Check if a session with the new name already exists to prevent overwriting.\n+                chroma_client.get_collection(name=new_session_name)\n+                return {\"status\": \"error\", \"message\": f\"A session named '{new_session_name}' already exists. Please choose a different name.\"}\n+            except ValueError:\n+                # This is the desired outcome: the collection does not exist.\n+                pass\n+            except Exception as e:\n+                return {\"status\": \"error\", \"message\": f\"An unexpected error occurred while checking for existing session: {e}\"}\n+\n+            # 1. Create the new collection\n+            target_collection = chroma_client.create_collection(name=new_session_name)\n+\n+            # 2. Copy history from the source collection to the new one\n+            history_to_copy = source_collection.get(include=[\"metadatas\", \"documents\", \"ids\"])\n+            if history_to_copy and history_to_copy.get('ids'):\n+                target_collection.add(\n+                    ids=history_to_copy['ids'],\n+                    documents=history_to_copy['documents'],\n+                    metadatas=history_to_copy['metadatas']\n+                )\n+\n+            # 3. Update the current session in memory to point to the new collection\n+            memory.collection = target_collection\n+            memory.session_name = new_session_name\n+            session_data['name'] = new_session_name\n+\n+            # 4. Notify the client UI of the name change\n+            socketio.emit('session_name_update', {'name': new_session_name}, to=session_id)\n+\n+            # 5. Log the event\n+            audit_log.log_event(\n+                event=\"Session Saved As\",\n+                session_id=session_id, session_name=new_session_name, loop_id=loop_id,\n+                source=\"System\", destination=\"Database\",\n+                details=f\"Copied from '{source_session_name}' to '{new_session_name}'. Active session is now '{new_session_name}'.\"\n+            )\n+\n+            return {\"status\": \"success\", \"message\": f\"Session saved as '{new_session_name}'. The original session '{source_session_name}' remains unchanged.\"}\n \n         elif action == 'list_sessions':\n             collections = chroma_client.list_collections()\n