--- a/app.py
+++ b/sandbox/app.py
@@ -5,6 +5,7 @@
 import os
 import logging
 import json
+import time
 import atexit
 from datetime import datetime
 from orchestrator import execute_reasoning_loop, confirmation_events
@@ -107,17 +108,24 @@
 api_stats = load_api_stats()
 atexit.register(save_api_stats)
 
-\"\"\"
-# --- NEW: Connect to the Haven to get the persistent session dictionary ---\
+# --- NEW: Connect to the Haven to get the persistent session dictionary ---
 class HavenManager(BaseManager):
     pass
 
 HavenManager.register('get_sessions')
 manager = HavenManager(address=('localhost', 50000), authkey=b'phoenixhaven')
-manager.connect()
+
+# Add a retry loop for robustness
+for i in range(5): # Try to connect 5 times
+    try:
+        manager.connect()
+        logging.info("Successfully connected to Haven.")
+        break
+    except ConnectionRefusedError:
+        logging.warning(f"Haven connection refused. Retrying in {i+1} second(s)...")
+        time.sleep(i+1)
+
 chat_sessions = manager.get_sessions()
-logging.info(\"Successfully connected to Haven and retrieved session dictionary.\")\n\"\"\"
-
-chat_sessions = {}
+client_session_map = {} # Maps temporary client IDs to persistent session names
 
 # --- SERVER ROUTES & EVENTS ---
 @app.route('/')