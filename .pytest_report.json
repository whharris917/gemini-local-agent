{"created": 1754532769.4187906, "duration": 5.549591541290283, "exitcode": 1, "root": "C:\\Users\\wilha\\projects\\gemini-local-agent", "environment": {}, "summary": {"passed": 18, "failed": 2, "total": 20, "collected": 20}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "sdlc/tests", "type": "Package"}]}, {"nodeid": "sdlc/tests/test_HAV_DEL.py", "outcome": "passed", "result": [{"nodeid": "sdlc/tests/test_HAV_DEL.py::test_HAV_DEL_001_delete_session", "type": "Function", "lineno": 13}]}, {"nodeid": "sdlc/tests/test_HAV_GCS.py", "outcome": "passed", "result": [{"nodeid": "sdlc/tests/test_HAV_GCS.py::test_HAV_GCS_001_create_new_session", "type": "Function", "lineno": 15}, {"nodeid": "sdlc/tests/test_HAV_GCS.py::test_HAV_GCS_002_use_existing_session", "type": "Function", "lineno": 26}]}, {"nodeid": "sdlc/tests/test_HAV_LSP.py", "outcome": "passed", "result": [{"nodeid": "sdlc/tests/test_HAV_LSP.py::test_HAV_LSP_001_load_success", "type": "Function", "lineno": 6}, {"nodeid": "sdlc/tests/test_HAV_LSP.py::test_HAV_LSP_002_load_failure", "type": "Function", "lineno": 20}]}, {"nodeid": "sdlc/tests/test_HAV_SND.py", "outcome": "passed", "result": [{"nodeid": "sdlc/tests/test_HAV_SND.py::test_HAV_SND_001_to_004_send_message_flow", "type": "Function", "lineno": 24}]}, {"nodeid": "sdlc/tests/test_RSP_HPL.py", "outcome": "passed", "result": [{"nodeid": "sdlc/tests/test_RSP_HPL.py::test_RSP_HPL_001_and_002_and_003_payload_handling", "type": "Function", "lineno": 6}]}, {"nodeid": "sdlc/tests/test_RSP_IPE.py", "outcome": "passed", "result": [{"nodeid": "sdlc/tests/test_RSP_IPE.py::test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_001_TC1-None-True]", "type": "Function", "lineno": 5}, {"nodeid": "sdlc/tests/test_RSP_IPE.py::test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_001_TC2--True]", "type": "Function", "lineno": 5}, {"nodeid": "sdlc/tests/test_RSP_IPE.py::test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_001_TC3-  -True]", "type": "Function", "lineno": 5}, {"nodeid": "sdlc/tests/test_RSP_IPE.py::test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_001_TC4-[06AUG2025_040527PM]-True]", "type": "Function", "lineno": 5}, {"nodeid": "sdlc/tests/test_RSP_IPE.py::test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_001_TC5- [06AUG2025_040527PM] -True]", "type": "Function", "lineno": 5}, {"nodeid": "sdlc/tests/test_RSP_IPE.py::test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_002_TC1-Hello world-False]", "type": "Function", "lineno": 5}, {"nodeid": "sdlc/tests/test_RSP_IPE.py::test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_002_TC2-[06AUG2025_040527PM] Hello-False]", "type": "Function", "lineno": 5}]}, {"nodeid": "sdlc/tests/test_RSP_PAR.py", "outcome": "passed", "result": [{"nodeid": "sdlc/tests/test_RSP_PAR.py::test_RSP_PAR_001_and_002_fenced_command", "type": "Function", "lineno": 6}, {"nodeid": "sdlc/tests/test_RSP_PAR.py::test_RSP_PAR_003_unfenced_command", "type": "Function", "lineno": 19}, {"nodeid": "sdlc/tests/test_RSP_PAR.py::test_RSP_PAR_004_malformed_command_repair", "type": "Function", "lineno": 30}, {"nodeid": "sdlc/tests/test_RSP_PAR.py::test_RSP_PAR_005_no_command_found", "type": "Function", "lineno": 41}]}, {"nodeid": "sdlc/tests/test_RSP_RPJ.py", "outcome": "passed", "result": [{"nodeid": "sdlc/tests/test_RSP_RPJ.py::test_RSP_RPJ_001_json_repair[RSP_RPJ_001_TC1-{\"notes\": \"This is a string with a newline\\ncharacter\"}-{\"notes\": \"This is a string with a newline\\\\ncharacter\"}]", "type": "Function", "lineno": 5}, {"nodeid": "sdlc/tests/test_RSP_RPJ.py::test_RSP_RPJ_001_json_repair[RSP_RPJ_001_TC2-{\"quote\": \"This is an \"unescaped\" quote\"}-{\"quote\": \"This is an \\\\\"unescaped\\\\\" quote\"}]", "type": "Function", "lineno": 5}]}, {"nodeid": "sdlc/tests", "outcome": "passed", "result": [{"nodeid": "sdlc/tests/test_HAV_DEL.py", "type": "Module"}, {"nodeid": "sdlc/tests/test_HAV_GCS.py", "type": "Module"}, {"nodeid": "sdlc/tests/test_HAV_LSP.py", "type": "Module"}, {"nodeid": "sdlc/tests/test_HAV_SND.py", "type": "Module"}, {"nodeid": "sdlc/tests/test_RSP_HPL.py", "type": "Module"}, {"nodeid": "sdlc/tests/test_RSP_IPE.py", "type": "Module"}, {"nodeid": "sdlc/tests/test_RSP_PAR.py", "type": "Module"}, {"nodeid": "sdlc/tests/test_RSP_RPJ.py", "type": "Module"}]}], "tests": [{"nodeid": "sdlc/tests/test_HAV_DEL.py::test_HAV_DEL_001_delete_session", "lineno": 13, "outcome": "passed", "keywords": ["test_HAV_DEL_001_delete_session", "test_HAV_DEL.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.002012500073760748, "outcome": "passed"}, "call": {"duration": 0.0003076000139117241, "outcome": "passed"}, "teardown": {"duration": 0.0003313003107905388, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_HAV_GCS.py::test_HAV_GCS_001_create_new_session", "lineno": 15, "outcome": "passed", "keywords": ["test_HAV_GCS_001_create_new_session", "test_HAV_GCS.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.00044689979404211044, "outcome": "passed"}, "call": {"duration": 0.0002812999300658703, "outcome": "passed"}, "teardown": {"duration": 0.000313399825245142, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_HAV_GCS.py::test_HAV_GCS_002_use_existing_session", "lineno": 26, "outcome": "passed", "keywords": ["test_HAV_GCS_002_use_existing_session", "test_HAV_GCS.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.0004019998013973236, "outcome": "passed"}, "call": {"duration": 0.00025120005011558533, "outcome": "passed"}, "teardown": {"duration": 0.00027509965002536774, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_HAV_LSP.py::test_HAV_LSP_001_load_success", "lineno": 6, "outcome": "passed", "keywords": ["test_HAV_LSP_001_load_success", "test_HAV_LSP.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.000390500295907259, "outcome": "passed"}, "call": {"duration": 0.0034954999573528767, "outcome": "passed"}, "teardown": {"duration": 0.0002875998616218567, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_HAV_LSP.py::test_HAV_LSP_002_load_failure", "lineno": 20, "outcome": "passed", "keywords": ["test_HAV_LSP_002_load_failure", "test_HAV_LSP.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.0003043999895453453, "outcome": "passed"}, "call": {"duration": 0.0011464999988675117, "outcome": "passed"}, "teardown": {"duration": 0.0002620997838675976, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_HAV_SND.py::test_HAV_SND_001_to_004_send_message_flow", "lineno": 24, "outcome": "failed", "keywords": ["test_HAV_SND_001_to_004_send_message_flow", "test_HAV_SND.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.0019970000721514225, "outcome": "passed"}, "call": {"duration": 0.0017097997479140759, "outcome": "failed", "crash": {"path": "C:\\Users\\wilha\\projects\\gemini-local-agent\\sdlc\\tests\\test_HAV_SND.py", "lineno": 53, "message": "AssertionError: assert {'status': 's...57608419024'>} == {'status': 's...del response'}\n  \n  Omitting 1 identical items, use -vv to show\n  Differing items:\n  {'text': <MagicMock name='mock.generate_content().text' id='1757608419024'>} != {'text': 'Model response'}\n  Use -v to get more diff"}, "traceback": [{"path": "sdlc\\tests\\test_HAV_SND.py", "lineno": 53, "message": "AssertionError"}], "longrepr": "mock_haven_with_session = (<haven.Haven object at 0x0000019939A01990>, {'test_session': [role: \"user\"\nparts {\n  text: \"Hello, model!\"\n}\n, role: \"model\"\nparts {\n  text: \"Model response\"\n}\n]}, 'test_session', <MagicMock id='1757608411408'>)\n\n    def test_HAV_SND_001_to_004_send_message_flow(mock_haven_with_session):\n        \"\"\"\n        Tests HAV-SND-001: Appends user prompt to history.\n        Tests HAV-SND-002: Calls the generative model.\n        Tests HAV-SND-003: Appends model response to history.\n        Tests HAV-SND-004: Returns the correct dictionary.\n        \"\"\"\n        instance, sessions, session_name, mock_model = mock_haven_with_session\n        user_prompt = \"Hello, model!\"\n    \n        # --- Execution ---\n        result = instance.send_message(session_name, user_prompt)\n    \n        # --- Verification ---\n        history = sessions[session_name]\n    \n        # Requirement HAV-SND-001\n        assert history[-2].role == \"user\"\n        assert history[-2].parts[0].text == user_prompt\n    \n        # Requirement HAV-SND-002\n        mock_model.generate_content.assert_called_once()\n    \n        # Requirement HAV-SND-003\n        assert history[-1].role == \"model\"\n        assert history[-1].parts[0].text == \"Model response\"\n    \n        # Requirement HAV-SND-004\n>       assert result == {\"status\": \"success\", \"text\": \"Model response\"}\nE       AssertionError: assert {'status': 's...57608419024'>} == {'status': 's...del response'}\nE         \nE         Omitting 1 identical items, use -vv to show\nE         Differing items:\nE         {'text': <MagicMock name='mock.generate_content().text' id='1757608419024'>} != {'text': 'Model response'}\nE         Use -v to get more diff\n\nsdlc\\tests\\test_HAV_SND.py:53: AssertionError"}, "teardown": {"duration": 0.00039659999310970306, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_RSP_HPL.py::test_RSP_HPL_001_and_002_and_003_payload_handling", "lineno": 6, "outcome": "passed", "keywords": ["test_RSP_HPL_001_and_002_and_003_payload_handling", "test_RSP_HPL.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.00025739986449480057, "outcome": "passed"}, "call": {"duration": 0.0004897001199424267, "outcome": "passed"}, "teardown": {"duration": 0.0002175997942686081, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_RSP_IPE.py::test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_001_TC1-None-True]", "lineno": 5, "outcome": "passed", "keywords": ["test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_001_TC1-None-True]", "parametrize", "pytestmark", "RSP_IPE_001_TC1-None-True", "test_RSP_IPE.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.0004594000056385994, "outcome": "passed"}, "call": {"duration": 0.0002573002129793167, "outcome": "passed"}, "teardown": {"duration": 0.00023899972438812256, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_RSP_IPE.py::test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_001_TC2--True]", "lineno": 5, "outcome": "passed", "keywords": ["test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_001_TC2--True]", "parametrize", "pytestmark", "RSP_IPE_001_TC2--True", "test_RSP_IPE.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.00032960018143057823, "outcome": "passed"}, "call": {"duration": 0.00022270018234848976, "outcome": "passed"}, "teardown": {"duration": 0.0002514999359846115, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_RSP_IPE.py::test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_001_TC3-  -True]", "lineno": 5, "outcome": "passed", "keywords": ["test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_001_TC3-  -True]", "parametrize", "pytestmark", "RSP_IPE_001_TC3-  -True", "test_RSP_IPE.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.0004086000844836235, "outcome": "passed"}, "call": {"duration": 0.0007151998579502106, "outcome": "passed"}, "teardown": {"duration": 0.0002882997505366802, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_RSP_IPE.py::test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_001_TC4-[06AUG2025_040527PM]-True]", "lineno": 5, "outcome": "passed", "keywords": ["test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_001_TC4-[06AUG2025_040527PM]-True]", "parametrize", "pytestmark", "RSP_IPE_001_TC4-[06AUG2025_040527PM]-True", "test_RSP_IPE.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.0007997001521289349, "outcome": "passed"}, "call": {"duration": 0.00029640039429068565, "outcome": "passed"}, "teardown": {"duration": 0.00036030029878020287, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_RSP_IPE.py::test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_001_TC5- [06AUG2025_040527PM] -True]", "lineno": 5, "outcome": "passed", "keywords": ["test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_001_TC5- [06AUG2025_040527PM] -True]", "parametrize", "pytestmark", "RSP_IPE_001_TC5- [06AUG2025_040527PM] -True", "test_RSP_IPE.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.0003836001269519329, "outcome": "passed"}, "call": {"duration": 0.0002259998582303524, "outcome": "passed"}, "teardown": {"duration": 0.00024219974875450134, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_RSP_IPE.py::test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_002_TC1-Hello world-False]", "lineno": 5, "outcome": "passed", "keywords": ["test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_002_TC1-Hello world-False]", "parametrize", "pytestmark", "RSP_IPE_002_TC1-Hello world-False", "test_RSP_IPE.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.0004518004134297371, "outcome": "passed"}, "call": {"duration": 0.00026170024648308754, "outcome": "passed"}, "teardown": {"duration": 0.0003090999089181423, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_RSP_IPE.py::test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_002_TC2-[06AUG2025_040527PM] Hello-False]", "lineno": 5, "outcome": "passed", "keywords": ["test_RSP_IPE_001_and_002_prose_emptiness[RSP_IPE_002_TC2-[06AUG2025_040527PM] Hello-False]", "parametrize", "pytestmark", "RSP_IPE_002_TC2-[06AUG2025_040527PM] Hello-False", "test_RSP_IPE.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.00029110023751854897, "outcome": "passed"}, "call": {"duration": 0.00016189971938729286, "outcome": "passed"}, "teardown": {"duration": 0.00020919973030686378, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_RSP_PAR.py::test_RSP_PAR_001_and_002_fenced_command", "lineno": 6, "outcome": "passed", "keywords": ["test_RSP_PAR_001_and_002_fenced_command", "test_RSP_PAR.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.00020750006660819054, "outcome": "passed"}, "call": {"duration": 0.0008805999532341957, "outcome": "passed"}, "teardown": {"duration": 0.0003427998162806034, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_RSP_PAR.py::test_RSP_PAR_003_unfenced_command", "lineno": 19, "outcome": "passed", "keywords": ["test_RSP_PAR_003_unfenced_command", "test_RSP_PAR.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.0003607003018260002, "outcome": "passed"}, "call": {"duration": 0.000649899709969759, "outcome": "passed"}, "teardown": {"duration": 0.0002919998951256275, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_RSP_PAR.py::test_RSP_PAR_004_malformed_command_repair", "lineno": 30, "outcome": "failed", "keywords": ["test_RSP_PAR_004_malformed_command_repair", "test_RSP_PAR.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.00025539984926581383, "outcome": "passed"}, "call": {"duration": 0.0007801996544003487, "outcome": "failed", "crash": {"path": "C:\\Users\\wilha\\projects\\gemini-local-agent\\sdlc\\tests\\test_RSP_PAR.py", "lineno": 40, "message": "AssertionError: assert 'line1\\nline2' == 'line1\\\\nline2'\n  \n  - line1\\nline2\n  + line1\n  + line2"}, "traceback": [{"path": "sdlc\\tests\\test_RSP_PAR.py", "lineno": 40, "message": "AssertionError"}], "longrepr": "def test_RSP_PAR_004_malformed_command_repair():\n        \"\"\"\n        Tests RSP-PAR-004: Attempts to repair malformed JSON.\n        \"\"\"\n        # This JSON has an unescaped newline that should be repaired.\n        input_string = '```json\\n{\"action\": \"create_file\", \"parameters\": {\"content\": \"line1\\nline2\"}}\\n```'\n        result = parse_agent_response(input_string)\n    \n        assert result.command is not None\n>       assert result.command.parameters[\"content\"] == \"line1\\\\nline2\"\nE       AssertionError: assert 'line1\\nline2' == 'line1\\\\nline2'\nE         \nE         - line1\\nline2\nE         + line1\nE         + line2\n\nsdlc\\tests\\test_RSP_PAR.py:40: AssertionError"}, "teardown": {"duration": 0.0005801999941468239, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_RSP_PAR.py::test_RSP_PAR_005_no_command_found", "lineno": 41, "outcome": "passed", "keywords": ["test_RSP_PAR_005_no_command_found", "test_RSP_PAR.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.00033689988777041435, "outcome": "passed"}, "call": {"duration": 0.00040300004184246063, "outcome": "passed"}, "teardown": {"duration": 0.00030269986018538475, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_RSP_RPJ.py::test_RSP_RPJ_001_json_repair[RSP_RPJ_001_TC1-{\"notes\": \"This is a string with a newline\\ncharacter\"}-{\"notes\": \"This is a string with a newline\\\\ncharacter\"}]", "lineno": 5, "outcome": "passed", "keywords": ["test_RSP_RPJ_001_json_repair[RSP_RPJ_001_TC1-{\"notes\": \"This is a string with a newline\\ncharacter\"}-{\"notes\": \"This is a string with a newline\\\\ncharacter\"}]", "parametrize", "pytestmark", "RSP_RPJ_001_TC1-{\"notes\": \"This is a string with a newline\\ncharacter\"}-{\"notes\": \"This is a string with a newline\\\\ncharacter\"}", "test_RSP_RPJ.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.0005195001140236855, "outcome": "passed"}, "call": {"duration": 0.0003487002104520798, "outcome": "passed"}, "teardown": {"duration": 0.0002890997566282749, "outcome": "passed"}}, {"nodeid": "sdlc/tests/test_RSP_RPJ.py::test_RSP_RPJ_001_json_repair[RSP_RPJ_001_TC2-{\"quote\": \"This is an \"unescaped\" quote\"}-{\"quote\": \"This is an \\\\\"unescaped\\\\\" quote\"}]", "lineno": 5, "outcome": "passed", "keywords": ["test_RSP_RPJ_001_json_repair[RSP_RPJ_001_TC2-{\"quote\": \"This is an \"unescaped\" quote\"}-{\"quote\": \"This is an \\\\\"unescaped\\\\\" quote\"}]", "parametrize", "pytestmark", "RSP_RPJ_001_TC2-{\"quote\": \"This is an \"unescaped\" quote\"}-{\"quote\": \"This is an \\\\\"unescaped\\\\\" quote\"}", "test_RSP_RPJ.py", "tests", "sdlc", "gemini-local-agent", ""], "setup": {"duration": 0.0004329998046159744, "outcome": "passed"}, "call": {"duration": 0.00035239988937973976, "outcome": "passed"}, "teardown": {"duration": 0.0004989998415112495, "outcome": "passed"}}], "warnings": [{"message": "This feature is deprecated as of June 24, 2025 and will be removed on June 24, 2026. For details, see https://cloud.google.com/vertex-ai/generative-ai/docs/deprecations/genai-vertexai-sdk.", "category": "UserWarning", "when": "collect", "filename": "C:\\Users\\wilha\\anaconda3\\envs\\gemini-agent\\Lib\\site-packages\\vertexai\\generative_models\\_generative_models.py", "lineno": 433}]}